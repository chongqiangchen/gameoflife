{"version":3,"sources":["ColorModeSwitcher.tsx","utils/index.ts","utils/constants.ts","hooks/useGame.tsx","components/MainGrid.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","getCellPosition","grid","column","row","Object","keys","length","getLiveNeighbours","liveCellNeighbours","transformGrid","itemsToDie","itemsToLive","newGrid","assign","forEach","cell","rowIndex","liveNeighbours","cellPos","itemPosition","removedGrid","columns","rows","position","c","r","Math","ceil","removeCellByPosition","addCellByPosition","useGame","useState","isRunning","setIsRunning","steps","setSteps","setGrid","liveCellsPos","setLiveCellsPos","console","log","useEffect","initialize","useInterval","handleNext","useCallback","cells","num","arr","Array","fill","ob","item","getCells","nextGrid","handleCell","currentCell","newOb","liveCellsToUpdate","cellIndex","indexOf","splice","randomize","randomGrid","map","random","randomizeGrid","MainGrid","colorMode","mb","as","fontFamily","textShadow","letterSpacing","display","overflow","href","rel","target","bgColor","backgroundImage","borderRadius","border","height","p","_hover","opacity","viewBox","width","className","aria-hidden","fillRule","d","gridTemplateColumns","gridGap","justifyContent","data-testid","index","backgroundColor","cursor","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","textAlign","minH","justifySelf","spacing","my","Date","getFullYear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4c4dd7f.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { COLUMNS, ROWS } from './constants'\n\nexport interface Grid {\n  [key: string]: boolean[]\n}\n\nexport const getCells = (num: number): Grid => {\n  const arr = new Array(num).fill(false)\n  let ob: any = { ...arr }\n  Object.keys(ob).forEach(item => {\n    ob[item] = [...arr]\n  })\n\n  return ob\n}\n\nexport const getCellPosition = (grid: Grid, column: number, row: number): number => {\n  return row * Object.keys(grid).length + (+column + 1)\n}\n\nexport const removeCellByPosition = (\n  grid: Grid,\n  columns: number,\n  rows: number,\n  position: number\n): Grid => {\n  const c = (position - 1) % columns\n  const r = Math.ceil(position / columns)\n\n  grid[c][r - 1] = false\n\n  return grid\n}\n\nexport const addCellByPosition = (\n  grid: Grid,\n  columns: number,\n  rows: number,\n  position: number\n): Grid => {\n  const c = (position - 1) % columns\n  const r = Math.ceil(position / columns)\n  grid[c][r - 1] = true\n\n  return grid\n}\n\nexport const getLiveNeighbours = (grid: Grid, column: number, row: number): number => {\n  let liveCellNeighbours = 0\n\n  if (grid?.[column]?.[row - 1]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[column]?.[row + 1]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[+column + 1]?.[row]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[+column + 1]?.[row - 1]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[+column + 1]?.[row + 1]) {\n    liveCellNeighbours += 1\n  }\n\n  if (grid?.[+column - 1]?.[row]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[+column - 1]?.[row - 1]) {\n    liveCellNeighbours += 1\n  }\n  if (grid?.[+column - 1]?.[row + 1]) {\n    liveCellNeighbours += 1\n  }\n\n  return liveCellNeighbours\n}\n\nexport const transformGrid = (grid: Grid): Grid => {\n  let itemsToDie: any[] = []\n  let itemsToLive: any[] = []\n  let newGrid: Grid = Object.assign({}, grid)\n\n  Object.keys(newGrid).forEach(column => {\n    newGrid[column].forEach((cell: any, rowIndex: any) => {\n      if (cell) {\n        let liveNeighbours = getLiveNeighbours(newGrid, column as any, rowIndex)\n        if (liveNeighbours < 2) {\n          let cellPos = getCellPosition(newGrid, column as any, rowIndex)\n          itemsToDie = [...itemsToDie, cellPos]\n        } else if (liveNeighbours === 2 || liveNeighbours === 3) {\n          let cellPos = getCellPosition(newGrid, column as any, rowIndex)\n          itemsToLive = [...itemsToLive, cellPos]\n        } else if (liveNeighbours > 3) {\n          let cellPos = getCellPosition(newGrid, column as any, rowIndex)\n          itemsToDie = [...itemsToDie, cellPos]\n        }\n      } else {\n        let liveNeighbours = getLiveNeighbours(newGrid, column as any, rowIndex)\n        if (liveNeighbours === 3) {\n          let cellPos = getCellPosition(newGrid, column as any, rowIndex)\n          itemsToLive = [...itemsToLive, cellPos]\n        }\n      }\n    })\n  })\n\n  itemsToDie.forEach(itemPosition => {\n    const removedGrid = removeCellByPosition(newGrid, COLUMNS, ROWS, itemPosition)\n    newGrid = { ...removedGrid }\n  })\n\n  itemsToLive.forEach(itemPosition => {\n    const removedGrid = addCellByPosition(newGrid, COLUMNS, ROWS, itemPosition)\n    newGrid = { ...removedGrid }\n  })\n\n  return newGrid\n}\n\nexport const randomizeGrid = (grid: Grid): Grid => {\n  let randomGrid: Grid = {}\n\n  Object.keys(grid).forEach(item => {\n    randomGrid[item] = grid[item].map(() => Math.random() >= 0.8)\n  })\n  return randomGrid\n}\n","export const COLUMNS = 32\nexport const ROWS = 32\nexport const INTERVAL = 500\n","import { useCallback, useEffect, useState } from 'react'\nimport { getCellPosition, getCells, Grid, randomizeGrid, transformGrid } from '../utils'\nimport { COLUMNS, INTERVAL } from '../utils/constants'\nimport useInterval from 'use-interval'\n\nconst useGame = () => {\n  const [isRunning, setIsRunning] = useState<boolean>(false)\n  const [steps, setSteps] = useState<number>(0)\n  const [grid, setGrid] = useState<Grid>({})\n  const [liveCellsPos, setLiveCellsPos] = useState<number[]>([])\n\n\n  console.log(liveCellsPos);\n\n  useEffect(() => {\n    initialize()\n  }, [])\n\n  useInterval(\n    () => {\n      handleNext()\n    },\n    isRunning ? INTERVAL : null\n  )\n\n  const initialize = useCallback(() => {\n    setSteps(0)\n    const cells = getCells(COLUMNS)\n\n    // cells[24][14] = true\n    // cells[25][13] = true\n    // cells[25][14] = true\n    // cells[25][15] = true\n    // cells[26][14] = true\n    setGrid(cells)\n  }, [])\n\n  const handleNext = useCallback(() => {\n    const nextGrid = transformGrid(grid)\n    setGrid(nextGrid)\n    setSteps(steps + 1)\n  }, [grid, steps])\n\n  const handleCell = useCallback((column: number, rowIndex: number, cell: boolean) => {\n    const currentCell = !cell\n    if (currentCell) {\n      console.log(column, rowIndex);\n    }\n\n    let newOb: any = { ...grid }\n    newOb[column][rowIndex] = currentCell\n\n    let cellPos = getCellPosition(grid, column, rowIndex)\n    \n    if (currentCell) {\n      setLiveCellsPos([...liveCellsPos, cellPos])\n    } else {\n      let liveCellsToUpdate = [...liveCellsPos]\n      const cellIndex = liveCellsToUpdate.indexOf(cellPos)\n      if (cellIndex > -1) {\n        liveCellsToUpdate.splice(cellIndex, 1)\n      }\n\n      setLiveCellsPos(liveCellsToUpdate)\n    }\n    setGrid(newOb)\n  }, [grid, liveCellsPos])\n\n  const randomize = useCallback(() => {\n    setGrid(randomizeGrid(grid))\n  }, [grid])\n\n  return {\n    grid,\n    isRunning,\n    steps,\n    initialize,\n    setIsRunning,\n    randomize,\n    handleCell,\n    handleNext,\n  }\n}\n\nexport default useGame\n","import * as React from 'react'\nimport { Box, Button, Flex, SimpleGrid, useColorMode } from '@chakra-ui/react'\nimport { COLUMNS } from '../utils/constants'\nimport useGame from '../hooks/useGame'\n\nexport default function MainGrid() {\n  const { colorMode } = useColorMode()\n  const { grid, steps, initialize, isRunning, setIsRunning, randomize, handleCell, handleNext } =\n    useGame()\n\n  return (\n    <div>\n      <Box mb=\"2rem\">\n        <Box\n          as=\"h1\"\n          fontFamily=\"Teko\"\n          fontSize=\"4.5rem\"\n          textShadow={colorMode === 'light' ? '8px 8px #9a9a9a' : '8px 8px #000000'}\n          letterSpacing=\"3px\"\n          color={colorMode === 'light' ? 'gray.800' : 'inherit'}\n        >\n          GAME OF LIFE\n        </Box>\n        <Box display=\"inline-block\" overflow=\"hidden\">\n          <Button\n            as=\"a\"\n            href=\"https://github.com/creotip/game-of-life-react\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            aria-label=\"Star creotip/game-of-life-react on GitHub\"\n            color=\"#24292f\"\n            bgColor=\"#ebf0f4\"\n            backgroundImage=\"linear-gradient(180deg, #f6f8fa, #ebf0f4 90%)\"\n            borderRadius=\"0.25em\"\n            border=\"1px solid #ccd1d5\"\n            height=\"30px\"\n            p=\"5px 10px\"\n            _hover={{\n              bgColor: '#ebf0f4',\n              opacity: 0.8,\n            }}\n          >\n            <svg\n              viewBox=\"0 0 16 16\"\n              width=\"16\"\n              height=\"16\"\n              className=\"octicon octicon-star\"\n              aria-hidden=\"true\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z\"\n              />\n            </svg>\n            &nbsp;<span>Star</span>\n          </Button>\n        </Box>\n      </Box>\n\n      <SimpleGrid gridTemplateColumns=\"1fr 5fr 1fr\" mb=\"2rem\">\n        {isRunning ? (\n          <Button onClick={() => setIsRunning(false)}>stop</Button>\n        ) : (\n          <Button onClick={() => setIsRunning(true)}>start</Button>\n        )}\n\n        <Flex gridGap=\"1rem\" justifyContent=\"center\">\n          <Button onClick={handleNext}>next</Button>\n          <Button onClick={initialize}>reset</Button>\n          <Button onClick={randomize}>randomize</Button>\n        </Flex>\n\n        <Box>Step: {steps}</Box>\n      </SimpleGrid>\n      <SimpleGrid\n        data-testid=\"grid-wrapper\"\n        gridTemplateColumns={`repeat(${COLUMNS}, 20px)`}\n        gridGap=\"2px\"\n        mb=\"4rem\"\n      >\n        {grid &&\n          Object.keys(grid).map((column, index) => (\n            <SimpleGrid key={index} className=\"column\" data-testid=\"column\" gridGap=\"2px\">\n              {grid[column].map((cell: boolean, rowIndex: number) => (\n                <Box\n                  onClick={() => handleCell(+column, rowIndex, cell)}\n                  key={rowIndex}\n                  data-testid=\"cell\"\n                  width=\"20px\"\n                  height=\"20px\"\n                  backgroundColor={cell ? 'black' : 'gray.300'}\n                  cursor=\"pointer\"\n                />\n              ))}\n            </SimpleGrid>\n          ))}\n      </SimpleGrid>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { ChakraProvider, Box, VStack, Grid, extendTheme, Button, ThemeConfig } from '@chakra-ui/react'\nimport { ColorModeSwitcher } from './ColorModeSwitcher'\nimport MainGrid from './components/MainGrid'\n\nconst config: ThemeConfig = {\n    initialColorMode: 'dark',\n    useSystemColorMode: false,\n}\n\nconst theme = extendTheme({ config })\n\nexport default theme\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Box textAlign=\"center\" fontSize=\"xl\">\n      <Grid minH=\"100vh\" p={3}>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <VStack spacing={8}>\n          <Box>\n            <MainGrid />\n          </Box>\n        </VStack>\n      </Grid>\n    </Box>\n    <Box textAlign=\"center\" my={8}>\n      <Box color=\"gray.500\">\n        ©<Box as=\"time\">{new Date().getFullYear()}</Box>{' '}\n        <a href=\"https://creotip.io/\">creotip.io</a>\n      </Box>\n    </Box>\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import '@fontsource/teko/500.css'\nimport { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}